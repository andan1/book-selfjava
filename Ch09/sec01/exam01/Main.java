package Ch09.sec01.exam01;
// 중첩 클래스 객체 생성
public class Main {

	public static void main(String[] args) {
		 A a = new A();
		 
		 // 인스턴스 멤버 클래스 객체 생성
		 A.B b = a.new B();
		 b.field1 = 3;
		 b.method1();
		 
		 // 정적 멤버 클래스 객체 생성
		 A.C c = new A.C();
		 c.field1 = 3;
		 c.method1();
		 A.C.field2 = 3;
		 A.C.method2();
		 
		 // 로컬 클래스 객체 생성을 위한 메소드 호출
		 a.method();
	}

}
// 중첩 클래스 : 클래스 내부에 선언한 클래스
// 두 클래스의 멤버들을 서로 쉽게 접근할 수 있고 
// 외부에는 불필요한 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있음
// 중첩 인터페이스 : 클래스 내부에 선언한 인터페이스
// 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해
// 멤버 클래스 : 클래스 멤버로서 선언되는 중첩 클래스
// 로컬 클래스 : 생성자 또는 내부에서 선언되는 중첩 클래스
// 멤버 클래스는 클래스나 객체가 사용중이라면 언제든지 재사용 가능
// 로컬 클래스는 메소드 실행할 때만 사용되고 메소드가 종료되면 없어짐
/*
멤버 클래스 - 인스턴스 멤버 클래스 - class A { class B{}} - A 객체를 생성해야만 사용할 수 있는 B 클래스
		  - 정적 멤버 클래스 - class A{ static B{}} - A 클래스로 바로 접근할 수 있는 B 클래스
로컬 클래스 - class A {void method() {class B {}}} - method()가 실행할 때만 사용할 수 있는 B 클래스
*/
// 인스턴스 멤버 클래스 : static 키워드 없이 중첩 선언된 클래스
// 인스턴스 필드와 메소드만 선언이 가능, 정적필드와 메소드는 선어할 수 없음
// 정적 멤버 클래스 : static 키워드로 선언된 클래스
// 모든 종류의 필드와 메소드 선언 가능
// 로컬 클래스 : 메소드 내에서 선언
// 접근 제한자 및 static을 붙일 수 없음
// 인스턴스 필드와 메소드만 선언할 수 있고 정적 필드와 메소드는 선언 불가
// 비동기 처리를 위해 스레드 객체를 만들 때 사용